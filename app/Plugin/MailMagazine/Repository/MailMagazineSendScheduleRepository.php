<?php
/*
* This file is part of EC-CUBE
*
* Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
* http://www.lockon.co.jp/
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

namespace Plugin\MailMagazine\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SendHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MailMagazineSendScheduleRepository extends EntityRepository
{
    public function GetCurrentSchedule($targetDate,&$searchDate){

        $convDt = $targetDate->format('Y-m-d 00:00:00.000000');

        //$convDt = \Datetime::createFromFormat($targetDate->format('Y-m-d H:i:s.u'),$convDt);
        $convDt = new \Datetime($convDt);

        $qb=$this->createQueryBuilder('m');

        $q= $qb
                    ->where($qb->expr()->between(':currDt','m.send_start','m.send_end')
                        )
                    ->andWhere('m.enable_flg=1')
                    ->andWhere('m.del_flg=0')
                    ->setParameter(':currDt',$convDt)
                    ->getQuery();


        $result= $q->getResult();



        
        $searchDate = $convDt;

        return $result;
    }

    /**
     * dtb_send_historyに追加する.
     *
     * @param \Plugin\MailMagazine\Entity\MailMagazineSendHistory $sendHistory
     */
    public function createSendSchedule(\Plugin\MailMagazine\Entity\MailMagazineSendSchedule $sendSchedule)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $em->persist($sendSchedule);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            throw $e;

        }

        return true;
    }

    /**
     * dtb_send_historyを更新する.
     * createSendHistoryを呼び出すだけだが明示的に指定する
     *
     * @param \Plugin\MailMagazine\Entity\MailMagazineSendHistory $sendHistory
     */
    public function updateSendSchedule(\Plugin\MailMagazine\Entity\MailMagazineSendSchedule $sendSchedule)
    {
        return $this->createSendSchedule($sendSchedule);
    }


    /**
    * logical delete.
    * @param  \Plugin\MailMagazine\Entity\MailMagazineSendSchedule $MailMagazineSendSchedule
    * @return bool
    */
    public function delete(\Plugin\MailMagazine\Entity\MailMagazineSendSchedule $MailMagazineSendSchedule)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            // 削除フラグをONにして更新
            $MailMagazineSendSchedule->setDelFlg(1);
            $em->persist($MailMagazineSendSchedule);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            throw $e;
            return false;
        }

        return true;
    }

    /**
    * 更新を行う.
    * @param \Plugin\MailMagazine\Entity\MailMagazineSendSchedule $MailMagazineSendSchedule
    * @return boolean
    */
    public function update(\Plugin\MailMagazine\Entity\MailMagazineSendSchedule $MailMagazineSendSchedule) {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            if(is_array($MailMagazineSendSchedule->getSendWeek())){
                $v=$MailMagazineSendSchedule->getSendWeek();
                $v = base64_encode(serialize($v));
                $MailMagazineSendSchedule->setSendWeek($v);

            }
            $em->persist($MailMagazineSendSchedule);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            throw $e;

            return false;
        }

        return true;

    }    
}
